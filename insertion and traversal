#include<iostream>
#include<stdio.h>
#include<queue>
#include<vector>

using namespace std;
struct node
{
	int data;
	struct node *left,*right;
};

struct node* NewNode(int new_data)
{
	struct node* temp = new node;
	temp->data = new_data;
	temp->left = temp->right = NULL;
	return temp;
}

struct node* insert_level_order(vector<int> arr, struct node *root,int i, int n)
{
	if(i < n)
	{
		struct node *temp;
		if(!temp)
		{
			cout << "\nOut of Memory";
			exit(1);
		}
		temp = NewNode(arr[i]);
		root = temp;

		root->left = insert_level_order(arr, root->left, 2*i+1, n);
		root->right = insert_level_order(arr, root->right, 2*i+2, n);
	}
	return root;
}

void InOrder(struct node *root)
{
	if(root)
	{
		InOrder(root->left);
		cout << root->data <<" ";
		InOrder(root->right);
	}
	return;
}

void PreOrder(struct node *root)
{
	if(root)
	{
		cout << root->data << " ";
		PreOrder(root->left);
		PreOrder(root->right);
	}
	return;
}

void PostOrder(struct node *root)
{
	if(root)
	{
		PostOrder(root->left);
		PostOrder(root->right);
		cout << root->data <<" ";
	}
	return;
}

int FindMax(struct node *root)
{
	int leftValue,rightValue,rootValue,max = INT8_MIN;
	if(root)
	{
		rootValue = root->data;
		leftValue = FindMax(root->left);
		rightValue = FindMax(root->right);
		if(leftValue > rightValue)
			max = leftValue;
		else
			max = rightValue;
		if(rootValue > max)
			max = rootValue;
	}
	return max;
}

int FindMin_LevelOrder(struct node *root)
{
	struct node *temp;
	queue<struct node*> q;
	int min = INT8_MAX;
	q.push(root);
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(temp->data < min)
			min = temp->data;
		if(temp->left)
			q.push(temp->left);
		if(temp->right)
			q.push(temp->right);
	}
	q.pop();
	return min;
}

bool search(struct node *root, int key)
{
	int temp;
	if (!root)
		return false;
	if(root->data == key)
		return true;
	return (search(root->left,key) || search(root->right,key));
}

void InsertLevelOrder(struct node *root, int key)
{
	if(!root)
	{
		root->data = key;
		root->left = root->right = NULL;
		return;
	}
	struct node *temp;
	struct node* toInsert = NewNode(key);
	queue<struct node*> q;
	q.push(root);
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(temp->left)
			q.push(temp->left);
		else
		{
			temp->left = toInsert;
			q.pop();
			return;
		}
	}
}

int HeightOfBinaryTree(struct node *root)
{
	int leftheight, rightheight;
	if(root == NULL)
		return 0;
	else
	{
		leftheight = HeightOfBinaryTree(root->left);
		rightheight = HeightOfBinaryTree(root->right);

		if(leftheight > rightheight)
			return (leftheight + 1);
		else
			return (rightheight + 1);
	}
}

struct node* DeepestNode(struct node *root)
{
	struct node *temp, *empty;
	queue<struct node*> q;
	q.push(root);
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(temp->left)
			q.push(temp->left);
		if(temp->right)
			q.push(temp->right);
	}
	//std::swap(q, empty);
	return temp;
}

int NumberOfLeafNodes(struct node *root)
{
	queue<struct node*> q,empty;
	q.push(root);
	int count = 0;
	struct node *temp;
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(!(temp->left && temp->right))
			count++;
		else
		{
			if(temp->left)
				q.push(temp->left);
			if(temp->right)
				q.push(temp->right);
		}
	}
	//std::swap(q, empty);
	return count;
}

int NumberOfFullNodes(struct node *root)
{
	int count = 0;
	if(root == NULL)
		return count;
	queue<struct node*> q;
	q.push(root);
	struct node *temp;
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(temp->left && temp->right)
			count++;
		if(temp->left)
			q.push(temp->left);
		if(temp->right)
			q.push(temp->right);
	}
	return count;
}

int NumberOfHalfNodes(struct node *root)
{
	int count = 0;
	if(root == NULL)
		return 0;
	queue<struct node*> q;
	struct node *temp;
	q.push(root);
	while(!q.empty())
	{
		temp = q.front();
		q.pop();
		if(temp->left && !temp->right)
			count++;
		if(temp->right && !temp->left)
			count++;
		if(temp->right)
			q.push(temp->right);
		if(temp->left)
			q.push(temp->left);
	}
	return count;
}

int StructuralSameTree(struct node *root1, struct node *root2)
{
	if(root1 == NULL && root2 == NULL)
		return 1;
	if(root1 == NULL || root2 == NULL)
		return 0;
	return (root1->data == root2->data && StructuralSameTree(root1->left, root2->left) && StructuralSameTree(root1->right, root2->right));
}

int LevelWithMaxSum(struct node *root)
{
	if(!root)
		return 0;
	int level = 0, maxlevel = 0;
}

int main()
{
	vector<int> v;
	int n,num, key;
	struct node *root;
	cout << "Enter total number of nodes ";
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		cout << "Enter the number : ";
		cin >> num;
		v.push_back(num);
	}
	root = insert_level_order(v, root, 0, n);
	//int max = FindMax(root);
	//cout << "The max value in the tree is " << max <<endl;
	cout << "\nPreOrder : "; PreOrder(root);
	/*cout << "\nInOrder : "; InOrder(root);
	cout << "\nPostOrder : "; PostOrder(root);
	int min = FindMin_LevelOrder(root);
	cout << "The min value in the tree is " << min << endl;

	cout << "Enter the number to be searched ";
	cin >> key;
	bool found = search(root, key);
	if(found)
		cout << "Element found in the tree" << endl;
	else
		cout << "Element not found in the tree" << endl;

	int count = NumberofLeafNodes(root);
	cout << "Number of leaf nodes are " << count << endl;*/

	int leaf = NumberOfLeafNodes(root);
	int full = NumberOfFullNodes(root);
	int half = NumberOfHalfNodes(root);
	cout << "\nNumber of leaf nodes " << leaf << endl;
	cout << "Number of full nodes " << full << endl;
	cout << "Number of half nodes " << half <<endl;
	return 0;
}
